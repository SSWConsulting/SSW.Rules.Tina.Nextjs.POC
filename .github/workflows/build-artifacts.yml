name: Building Artifact depending on environment passed in parameter

on:
    workflow_call:
        inputs:
            tag:
                type: string
                required: true
            tina_branch:
                type: string
                required: false
                default: ''
            source_branch:
                type: string
                required: false
                default: ''
                description: 'Source branch name that triggered this build'
        secrets:
            AZURE_CLIENT_ID:
                required: true
            AZURE_TENANT_ID:
                required: true
            AZURE_SUBSCRIPTION_ID:
                required: true
            TINA_TOKEN:
                required: false
            NEXT_PUBLIC_TINA_CLIENT_ID:
                required: false
            TOKEN:
                required: true
            NEXT_PUBLIC_ALGOLIA_APP_ID:
                required: false
            NEXT_PUBLIC_ALGOLIA_ADMIN_KEY:
                required: false
            NEXT_PUBLIC_ALGOLIA_INDEX_NAME:
                required: false
            NEXT_PUBLIC_ALGOLIA_API_KEY:
                required: false
            NEXT_PUBLIC_TINA_BRANCH:
                required: false
            NEXT_PUBLIC_API_BASE_URL:
                required: false
        outputs:
            image_tag:
                description: 'Docker tag to deploy'
                value: ${{ jobs.build-and-push.outputs.image_tag }}
            image_digest:
                value: ${{ jobs.build-and-push.outputs.image_digest }}
            build_timestamp:
                description: 'Build timestamp'
                value: ${{ jobs.build-and-push.outputs.build_timestamp }}
            build_date:
                description: 'Build date'
                value: ${{ jobs.build-and-push.outputs.build_date }}
            commit_hash:
                description: 'Commit hash'
                value: ${{ jobs.build-and-push.outputs.commit_hash }}
            version_deployed:
                description: 'Version deployed'
                value: ${{ jobs.build-and-push.outputs.version_deployed }}
            deployment_url:
                description: 'Deployment URL'
                value: ${{ jobs.build-and-push.outputs.deployment_url }}

defaults:
    run:
        shell: bash

jobs:
    build-and-push:
        runs-on: ubuntu-latest
        environment: ${{ inputs.tag }}
        outputs:
            image_tag: ${{ steps.meta.outputs.tags }}
            image_digest: ${{ steps.build.outputs.digest }}
            build_timestamp: ${{ env.BUILD_TIMESTAMP }}
            build_date: ${{ env.BUILD_DATE }}
            commit_hash: ${{ env.COMMIT_HASH }}
            version_deployed: ${{ env.VERSION_DEPLOYED }}
            deployment_url: ${{ env.DEPLOYMENT_URL }}
        steps:
            # ────────────────────────────── BUILD INFO ─────────────────────────────
            - name: Generate build information
              id: build_info
              run: |
                  BUILD_TIMESTAMP=$(date +%s)000
                  BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
                  COMMIT_HASH=$(echo "${{ github.sha }}" | cut -c1-7)
                  VERSION_DEPLOYED="${{ github.run_number }}"
                  DEPLOYMENT_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  
                  echo "BUILD_TIMESTAMP=$BUILD_TIMESTAMP" >> $GITHUB_ENV
                  echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
                  echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV
                  echo "VERSION_DEPLOYED=$VERSION_DEPLOYED" >> $GITHUB_ENV
                  echo "DEPLOYMENT_URL=$DEPLOYMENT_URL" >> $GITHUB_ENV
                  
                  echo "🏗️ Build Info Generated:"
                  echo "  Timestamp: $BUILD_TIMESTAMP"
                  echo "  Date: $BUILD_DATE"
                  echo "  Version: $VERSION_DEPLOYED"
                  echo "  Commit: $COMMIT_HASH"

            - name: Log build information
              run: |
                  echo "🚀 Starting build process"
                  echo "Source branch: ${{ inputs.source_branch || 'Not specified' }}"
                  echo "Tina branch: ${{ inputs.tina_branch || secrets.NEXT_PUBLIC_TINA_BRANCH || 'Default' }}"
                  echo "Environment tag: ${{ inputs.tag }}"
                  echo "Registry: ${{ vars.registry_name }}"
                  echo "Image: ${{ vars.IMAGE_NAME }}"
                  echo "Build timestamp: ${{ env.BUILD_TIMESTAMP }}"
                  echo "Build version: ${{ env.VERSION_DEPLOYED }}"

            # ────────────────────────────── CHECKOUTS ──────────────────────────────
            - name: Checkout main repo
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  lfs: true

            - name: Checkout SSW.Rules.Content
              uses: actions/checkout@v4
              with:
                  repository: SSWConsulting/SSW.Rules.Content
                  ref: ${{ inputs.tina_branch || secrets.NEXT_PUBLIC_TINA_BRANCH }}
                  token: ${{ secrets.TOKEN }}
                  path: content-temp
                  fetch-depth: 0
                  lfs: true

            # ────────────────────────────── PYTHON + MAPPING FILES ────────────────
            - name: Setup Python
              uses: actions/setup-python@v4
              with:
                  python-version: '3.x'

            - name: Generate rule‑category mapping files
              working-directory: content-temp/scripts/tina-migration
              run: python build-rule-category-map.py

            - name: Copy generated mapping + content
              run: |
                  cp content-temp/scripts/tina-migration/rule-to-categories.json ./
                  cp content-temp/scripts/tina-migration/category-uri-title-map.json ./
                  mv content-temp ./content

            # ────────────────────────────── AZURE LOGIN ───────────────────────────
            - name: Azure CLI – Login
              uses: azure/login@v2
              with:
                  client-id: ${{ secrets.AZURE_CLIENT_ID }}
                  tenant-id: ${{ secrets.AZURE_TENANT_ID }}
                  subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

            - name: Login to ACR
              run: az acr login --name ${{ vars.registry_name }}

            # ────────────────────────────── CACHE TRACKING ────────────────────────
            - name: Check cache usage before build
              run: |
                  echo "📊 Cache usage before build:"
                  gh api repos/${{ github.repository }}/actions/caches --paginate \
                    --jq '[.actions_caches[] | select(.key | contains("gha")) | .size_in_bytes] | add // 0' \
                    > cache_before.txt
                  CACHE_BEFORE=$(cat cache_before.txt)
                  echo "Current cache size: ${CACHE_BEFORE} bytes"
                  echo "CACHE_BEFORE=${CACHE_BEFORE}" >> $GITHUB_ENV
              env:
                  GH_TOKEN: ${{ github.token }}

            # ────────────────────────────── DOCKER BUILD ──────────────────────────
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Extract metadata (tags, labels)
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ vars.registry_name }}.azurecr.io/${{ vars.image_name }}
                  tags: |
                      type=raw,value=${{ inputs.tag }}
                  labels: |
                      org.opencontainers.image.source.branch=${{ inputs.source_branch }}
                      org.opencontainers.image.tina.branch=${{ inputs.tina_branch || secrets.NEXT_PUBLIC_TINA_BRANCH }}
                      org.opencontainers.image.build.timestamp=${{ env.BUILD_TIMESTAMP }}
                      org.opencontainers.image.build.version=${{ env.VERSION_DEPLOYED }}
                      org.opencontainers.image.build.commit=${{ env.COMMIT_HASH }}

            - name: Create Dockerfile
              run: |
                  cat > Dockerfile <<'EOF'
                  FROM node:18-alpine AS base

                  FROM base AS deps
                  RUN apk add --no-cache libc6-compat git-lfs
                  WORKDIR /app
                  COPY package*.json ./
                  COPY yarn.lock* ./
                  RUN if [ -f yarn.lock ]; then yarn --frozen-lockfile; \
                      elif [ -f package-lock.json ]; then npm ci --force; \
                      else npm install --force; fi

                  FROM base AS builder
                  WORKDIR /app
                  COPY --from=deps /app/node_modules ./node_modules
                  COPY . .
                  RUN git lfs pull || true

                  # Build arguments for build info
                  ARG BUILD_TIMESTAMP
                  ARG VERSION_DEPLOYED
                  ARG DEPLOYMENT_URL
                  ARG BUILD_DATE
                  ARG COMMIT_HASH

                  # Existing build arguments
                  ARG TINA_TOKEN
                  ARG NEXT_PUBLIC_TINA_CLIENT_ID
                  ARG NEXT_PUBLIC_TINA_BRANCH
                  ARG NEXT_PUBLIC_ALGOLIA_APP_ID
                  ARG NEXT_PUBLIC_ALGOLIA_ADMIN_KEY
                  ARG NEXT_PUBLIC_ALGOLIA_INDEX_NAME
                  ARG NEXT_PUBLIC_ALGOLIA_API_KEY
                  ARG NEXT_PUBLIC_API_BASE_URL
                  ARG NEXT_PUBLIC_GITHUB_ORG
                  ARG NEXT_PUBLIC_GITHUB_REPO
                  ARG NEXT_PUBLIC_GISCUS_REPO_NAME
                  ARG NEXT_PUBLIC_GISCUS_REPO_ID
                  ARG NEXT_PUBLIC_GISCUS_CATEGORY_ID
                  ARG NEXT_PUBLIC_GISCUS_THEME_URL

                  # Environment variables for build info (available at build time and runtime)
                  ENV BUILD_TIMESTAMP=$BUILD_TIMESTAMP \
                        VERSION_DEPLOYED=$VERSION_DEPLOYED \
                        DEPLOYMENT_URL=$DEPLOYMENT_URL \
                        BUILD_DATE=$BUILD_DATE \
                        COMMIT_HASH=$COMMIT_HASH \
                        TINA_TOKEN=$TINA_TOKEN \
                        NEXT_PUBLIC_TINA_CLIENT_ID=$NEXT_PUBLIC_TINA_CLIENT_ID \
                        NEXT_PUBLIC_TINA_BRANCH=$NEXT_PUBLIC_TINA_BRANCH \
                        NEXT_PUBLIC_ALGOLIA_APP_ID=$NEXT_PUBLIC_ALGOLIA_APP_ID \
                        NEXT_PUBLIC_ALGOLIA_ADMIN_KEY=$NEXT_PUBLIC_ALGOLIA_ADMIN_KEY \
                        NEXT_PUBLIC_ALGOLIA_INDEX_NAME=$NEXT_PUBLIC_ALGOLIA_INDEX_NAME \
                        NEXT_PUBLIC_ALGOLIA_API_KEY=$NEXT_PUBLIC_ALGOLIA_API_KEY \
                        NEXT_PUBLIC_GITHUB_ORG=$NEXT_PUBLIC_GITHUB_ORG \
                        NEXT_PUBLIC_GITHUB_REPO=$NEXT_PUBLIC_GITHUB_REPO \
                        NEXT_PUBLIC_GISCUS_REPO_NAME=$NEXT_PUBLIC_GISCUS_REPO_NAME \
                        NEXT_PUBLIC_GISCUS_REPO_ID=$NEXT_PUBLIC_GISCUS_REPO_ID \
                        NEXT_PUBLIC_GISCUS_CATEGORY_ID=$NEXT_PUBLIC_GISCUS_CATEGORY_ID \
                        NEXT_PUBLIC_GISCUS_THEME_URL=$NEXT_PUBLIC_GISCUS_THEME_URL \
                        NEXT_TELEMETRY_DISABLED=1

                  RUN if [ -f yarn.lock ]; then yarn build; else npm run build; fi

                  FROM base AS runner
                  WORKDIR /app

                  # Environment variables for runtime
                  ENV NODE_ENV=production \
                      NEXT_TELEMETRY_DISABLED=1 \
                      PORT=3000 \
                      HOSTNAME="0.0.0.0"

                  # Copy build info to runtime stage
                  ARG BUILD_TIMESTAMP
                  ARG VERSION_DEPLOYED
                  ARG DEPLOYMENT_URL
                  ARG BUILD_DATE
                  ARG COMMIT_HASH

                  ENV BUILD_TIMESTAMP=$BUILD_TIMESTAMP \
                      VERSION_DEPLOYED=$VERSION_DEPLOYED \
                      DEPLOYMENT_URL=$DEPLOYMENT_URL \
                      BUILD_DATE=$BUILD_DATE \
                      COMMIT_HASH=$COMMIT_HASH

                  RUN addgroup -S nodejs -g 1001 && adduser -S nextjs -u 1001
                  COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
                  COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
                  COPY --from=builder /app/public ./public
                  USER nextjs
                  EXPOSE 3000
                  CMD ["node", "server.js"]
                  EOF

            - name: Build & push image
              id: build
              uses: docker/build-push-action@v5
              with:
                  context: .
                  platforms: linux/amd64
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  build-args: |
                        BUILD_TIMESTAMP=${{ env.BUILD_TIMESTAMP }}
                        VERSION_DEPLOYED=${{ env.VERSION_DEPLOYED }}
                        DEPLOYMENT_URL=${{ env.DEPLOYMENT_URL }}
                        BUILD_DATE=${{ env.BUILD_DATE }}
                        COMMIT_HASH=${{ env.COMMIT_HASH }}
                        TINA_TOKEN=${{ secrets.TINA_TOKEN }}
                        NEXT_PUBLIC_TINA_CLIENT_ID=${{ secrets.NEXT_PUBLIC_TINA_CLIENT_ID }}
                        NEXT_PUBLIC_ALGOLIA_APP_ID=${{ secrets.NEXT_PUBLIC_ALGOLIA_APP_ID }}
                        NEXT_PUBLIC_ALGOLIA_ADMIN_KEY=${{ secrets.NEXT_PUBLIC_ALGOLIA_ADMIN_KEY }}
                        NEXT_PUBLIC_ALGOLIA_INDEX_NAME=${{ secrets.NEXT_PUBLIC_ALGOLIA_INDEX_NAME }}
                        NEXT_PUBLIC_ALGOLIA_API_KEY=${{ secrets.NEXT_PUBLIC_ALGOLIA_API_KEY }}
                        NEXT_PUBLIC_TINA_BRANCH=${{ inputs.tina_branch || secrets.NEXT_PUBLIC_TINA_BRANCH }}
                        NEXT_PUBLIC_GITHUB_ORG=${{ vars.NEXT_PUBLIC_GITHUB_ORG }}
                        NEXT_PUBLIC_GITHUB_REPO=${{ vars.NEXT_PUBLIC_GITHUB_REPO }}
                        NEXT_PUBLIC_GISCUS_REPO_NAME=${{ vars.NEXT_PUBLIC_GISCUS_REPO_NAME }}
                        NEXT_PUBLIC_GISCUS_REPO_ID=${{ vars.NEXT_PUBLIC_GISCUS_REPO_ID }}
                        NEXT_PUBLIC_GISCUS_CATEGORY_ID=${{ vars.NEXT_PUBLIC_GISCUS_CATEGORY_ID }}
                        NEXT_PUBLIC_GISCUS_THEME_URL=${{ vars.NEXT_PUBLIC_GISCUS_THEME_URL }}
                        NEXT_PUBLIC_API_BASE_URL=${{ secrets.NEXT_PUBLIC_API_BASE_URL }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

            - name: Check cache usage after build
              run: |
                  echo "📊 Cache usage after build:"
                  gh api repos/${{ github.repository }}/actions/caches --paginate \
                    --jq '[.actions_caches[] | select(.key | contains("gha")) | .size_in_bytes] | add // 0' \
                    > cache_after.txt
                  CACHE_AFTER=$(cat cache_after.txt)
                  CACHE_CONSUMED=$((CACHE_AFTER - CACHE_BEFORE))
                  
                  echo "Cache size after build: ${CACHE_AFTER} bytes"
                  echo "Cache consumed this build: ${CACHE_CONSUMED} bytes"
                  echo ""
                  echo "📈 Cache Summary:"
                  echo "  Before: $(numfmt --to=iec --suffix=B $CACHE_BEFORE)"
                  echo "  After:  $(numfmt --to=iec --suffix=B $CACHE_AFTER)"
                  echo "  Used:   $(numfmt --to=iec --suffix=B $CACHE_CONSUMED)"
              env:
                  GH_TOKEN: ${{ github.token }}

            - name: Image info
              run: |
                  echo "✅ Build completed successfully!"
                  echo "Image tag   : ${{ steps.meta.outputs.tags }}"
                  echo "Image digest: ${{ steps.build.outputs.digest }}"
                  echo "Source branch: ${{ inputs.source_branch || 'Not specified' }}"
                  echo "Content branch: ${{ inputs.tina_branch || secrets.NEXT_PUBLIC_TINA_BRANCH }}"
                  echo "Build Info:"
                  echo "  📅 Build Date: ${{ env.BUILD_DATE }}"
                  echo "  🏷️ Version: ${{ env.VERSION_DEPLOYED }}"
                  echo "  🔗 Deployment URL: ${{ env.DEPLOYMENT_URL }}"
                  echo "  📝 Commit: ${{ env.COMMIT_HASH }}"