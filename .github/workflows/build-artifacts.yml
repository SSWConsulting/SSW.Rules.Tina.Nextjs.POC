name: Building Artifact depending on environment passed in parameter

on:
    workflow_call:
        inputs:
            tag:
                type: string
                required: true
            registry_name:
                type: string
                required: false
                default: "sswrulesregistry"
            image_name:
                type: string
                required: false
                default: "ssw-rules-tina-nextjs"
        secrets:
            AZURE_CLIENT_ID:
                required: true
            AZURE_TENANT_ID:
                required: true
            AZURE_SUBSCRIPTION_ID:
                required: true
            TINA_TOKEN:
                required: false
            NEXT_PUBLIC_TINA_CLIENT_ID:
                required: false
            NEXT_PUBLIC_TINA_BRANCH:
                required: false

defaults:
    run:
        shell: bash

jobs:
    build-and-push:
        runs-on: ubuntu-latest
        environment: staging
        outputs:
            image_tag: ${{ steps.meta.outputs.tags }}
            image_digest: ${{ steps.build.outputs.digest }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Get current date
              id: date
              run: |
                  echo "date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT

            - name: Azure CLI - Login
              uses: azure/login@v2
              with:
                  client-id: ${{ secrets.AZURE_CLIENT_ID }}
                  tenant-id: ${{ secrets.AZURE_TENANT_ID }}
                  subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

            - name: Login to Azure Container Registry
              run: |
                  az acr login --name ${{ inputs.registry_name }}

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Extract metadata
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ inputs.registry_name }}.azurecr.io/${{ inputs.image_name }}
                  tags: |
                      type=raw,value=${{ inputs.tag }}
                      type=raw,value=${{ inputs.tag }}-{{sha}}
                      type=raw,value=${{ inputs.tag }}-{{date 'YYYYMMDD-HHmmss'}}

            - name: Create Dockerfile
              run: |
                  cat > Dockerfile << 'EOF'
                  # Use Node.js 18 Alpine as base image
                  FROM node:18-alpine AS base

                  # Install dependencies only when needed
                  FROM base AS deps
                  RUN apk add --no-cache libc6-compat
                  WORKDIR /app

                  # Copy package files
                  COPY package*.json ./
                  COPY yarn.lock* ./

                  # Install dependencies with legacy peer deps to handle conflicts
                  RUN \
                    if [ -f yarn.lock ]; then yarn --frozen-lockfile; \
                    elif [ -f package-lock.json ]; then npm ci --force; \
                    else npm install --force; \
                    fi

                  # Rebuild the source code only when needed
                  FROM base AS builder
                  WORKDIR /app
                  COPY --from=deps /app/node_modules ./node_modules
                  COPY . .

                  # Set environment variables for build
                  ARG TINA_TOKEN
                  ARG NEXT_PUBLIC_TINA_CLIENT_ID
                  ENV TINA_TOKEN=$TINA_TOKEN
                  ENV NEXT_PUBLIC_TINA_CLIENT_ID=$NEXT_PUBLIC_TINA_CLIENT_ID
                  ENV NEXT_PUBLIC_TINA_BRANCH=$NEXT_PUBLIC_TINA_BRANCH
                  ENV NEXT_TELEMETRY_DISABLED=1

                  # Build the application
                  RUN \
                    if [ -f yarn.lock ]; then yarn build; \
                    else npm run build; \
                    fi

                  # Production image, copy all the files and run next
                  FROM base AS runner
                  WORKDIR /app

                  ENV NODE_ENV=production
                  ENV NEXT_TELEMETRY_DISABLED=1

                  RUN addgroup --system --gid 1001 nodejs
                  RUN adduser --system --uid 1001 nextjs

                  # Copy the built application
                  COPY --from=builder /app/public ./public

                  # Set the correct permission for prerender cache
                  RUN mkdir .next
                  RUN chown nextjs:nodejs .next

                  # Automatically leverage output traces to reduce image size
                  # https://nextjs.org/docs/advanced-features/output-file-tracing
                  COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
                  COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

                  USER nextjs

                  EXPOSE 3000

                  ENV PORT=3000
                  ENV HOSTNAME="0.0.0.0"

                  # Use dumb-init to handle signals properly
                  CMD ["node", "server.js"]
                  EOF

            - name: Build and push Docker image
              id: build
              uses: docker/build-push-action@v5
              with:
                  context: .
                  platforms: linux/amd64
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  build-args: |
                      TINA_TOKEN=${{ secrets.TINA_TOKEN }}
                      NEXT_PUBLIC_TINA_CLIENT_ID=${{ secrets.NEXT_PUBLIC_TINA_CLIENT_ID }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

            - name: Output image info
              run: |
                  echo "Image built and pushed successfully!"
                  echo "Tags: ${{ steps.meta.outputs.tags }}"
                  echo "Digest: ${{ steps.build.outputs.digest }}"