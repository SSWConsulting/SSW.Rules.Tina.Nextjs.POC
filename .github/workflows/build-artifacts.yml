name: Building Artifact depending on environment passed in parameter

on:
    workflow_call:
        inputs:
            tag:
                type: string
                required: true
            tina_branch:
                type: string
                required: false
                default: ''
            source_branch:
                type: string
                required: false
                default: ''
                description: 'Source branch name that triggered this build'
        secrets:
            AZURE_CLIENT_ID:
                required: true
            AZURE_TENANT_ID:
                required: true
            AZURE_SUBSCRIPTION_ID:
                required: true
            TINA_TOKEN:
                required: false
            NEXT_PUBLIC_TINA_CLIENT_ID:
                required: false
            TOKEN:
                required: true
            NEXT_PUBLIC_ALGOLIA_APP_ID:
                required: false
            NEXT_PUBLIC_ALGOLIA_ADMIN_KEY:
                required: false
            NEXT_PUBLIC_ALGOLIA_INDEX_NAME:
                required: false
            NEXT_PUBLIC_ALGOLIA_API_KEY:
                required: false
            NEXT_PUBLIC_TINA_BRANCH:
                required: false
        outputs:
            image_tag:
                description: 'Docker tag to deploy'
                value: ${{ jobs.build-and-push.outputs.image_tag }}
            image_digest:
                value: ${{ jobs.build-and-push.outputs.image_digest }}

defaults:
    run:
        shell: bash

jobs:
    build-and-push:
        runs-on: ubuntu-latest
        environment: ${{ inputs.tag }}
        outputs:
            image_tag: ${{ steps.meta.outputs.tags }}
            image_digest: ${{ steps.build.outputs.digest }}
        steps:
            # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ BUILD INFO â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
            - name: Log build information
              run: |
                  echo "ðŸš€ Starting build process"
                  echo "Source branch: ${{ inputs.source_branch || 'Not specified' }}"
                  echo "Tina branch: ${{ inputs.tina_branch || secrets.NEXT_PUBLIC_TINA_BRANCH || 'Default' }}"
                  echo "Environment tag: ${{ inputs.tag }}"
                  echo "Registry: ${{ vars.registry_name }}"
                  echo "Image: ${{ vars.IMAGE_NAME }}"

            # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ CHECKOUTS â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
            - name: Checkout main repo
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  lfs: true

            - name: Checkout SSW.Rules.Content
              uses: actions/checkout@v4
              with:
                  repository: SSWConsulting/SSW.Rules.Content
                  ref: ${{ inputs.tina_branch || secrets.NEXT_PUBLIC_TINA_BRANCH }}
                  token: ${{ secrets.TOKEN }}
                  path: content-temp
                  fetch-depth: 0
                  lfs: true

            # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ PYTHON + MAPPING FILES â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
            - name: Setup Python
              uses: actions/setup-python@v4
              with:
                  python-version: '3.x'

            - name: Generate ruleâ€‘category mapping files
              working-directory: content-temp/scripts/tina-migration
              run: python build-rule-category-map.py

            - name: Copy generated mapping + content
              run: |
                  cp content-temp/scripts/tina-migration/rule-to-categories.json ./
                  cp content-temp/scripts/tina-migration/category-uri-title-map.json ./
                  mv content-temp ./content

            # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ AZURE LOGIN â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
            - name: Azure CLI â€“ Login
              uses: azure/login@v2
              with:
                  client-id: ${{ secrets.AZURE_CLIENT_ID }}
                  tenant-id: ${{ secrets.AZURE_TENANT_ID }}
                  subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

            - name: Login to ACR
              run: az acr login --name ${{ vars.registry_name }}

            # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ DOCKER BUILD â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Extract metadata (tags, labels)
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ vars.registry_name }}.azurecr.io/${{ vars.image_name }}
                  tags: |
                      type=raw,value=${{ inputs.tag }}
                  labels: |
                      org.opencontainers.image.source.branch=${{ inputs.source_branch }}
                      org.opencontainers.image.tina.branch=${{ inputs.tina_branch || secrets.NEXT_PUBLIC_TINA_BRANCH }}

            - name: Create Dockerfile
              run: |
                  cat > Dockerfile <<'EOF'
                  FROM node:18-alpine AS base

                  FROM base AS deps
                  RUN apk add --no-cache libc6-compat git-lfs
                  WORKDIR /app
                  COPY package*.json ./
                  COPY yarn.lock* ./
                  RUN if [ -f yarn.lock ]; then yarn --frozen-lockfile; \
                      elif [ -f package-lock.json ]; then npm ci --force; \
                      else npm install --force; fi

                  FROM base AS builder
                  WORKDIR /app
                  COPY --from=deps /app/node_modules ./node_modules
                  COPY . .
                  RUN git lfs pull || true

                  ARG TINA_TOKEN
                  ARG NEXT_PUBLIC_TINA_CLIENT_ID
                  ARG NEXT_PUBLIC_TINA_BRANCH
                  ARG NEXT_PUBLIC_ALGOLIA_APP_ID
                  ARG NEXT_PUBLIC_ALGOLIA_ADMIN_KEY
                  ARG NEXT_PUBLIC_ALGOLIA_INDEX_NAME
                  ARG NEXT_PUBLIC_ALGOLIA_API_KEY
                  ENV TINA_TOKEN=$TINA_TOKEN \
                      NEXT_PUBLIC_TINA_CLIENT_ID=$NEXT_PUBLIC_TINA_CLIENT_ID \
                      NEXT_PUBLIC_TINA_BRANCH=$NEXT_PUBLIC_TINA_BRANCH \
                      NEXT_PUBLIC_ALGOLIA_APP_ID=$NEXT_PUBLIC_ALGOLIA_APP_ID \
                      NEXT_PUBLIC_ALGOLIA_ADMIN_KEY=$NEXT_PUBLIC_ALGOLIA_ADMIN_KEY \
                      NEXT_PUBLIC_ALGOLIA_INDEX_NAME=$NEXT_PUBLIC_ALGOLIA_INDEX_NAME \
                      NEXT_PUBLIC_ALGOLIA_API_KEY=$NEXT_PUBLIC_ALGOLIA_API_KEY \
                      NEXT_TELEMETRY_DISABLED=1

                  RUN if [ -f yarn.lock ]; then yarn build; else npm run build; fi

                  FROM base AS runner
                  WORKDIR /app
                  ENV NODE_ENV=production \
                      NEXT_TELEMETRY_DISABLED=1 \
                      PORT=3000 \
                      HOSTNAME="0.0.0.0"
                  RUN addgroup -S nodejs -g 1001 && adduser -S nextjs -u 1001
                  COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
                  COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
                  COPY --from=builder /app/public ./public
                  USER nextjs
                  EXPOSE 3000
                  CMD ["node", "server.js"]
                  EOF

            - name: Build & push image
              id: build
              uses: docker/build-push-action@v5
              with:
                  context: .
                  platforms: linux/amd64
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  build-args: |
                      TINA_TOKEN=${{ secrets.TINA_TOKEN }}
                      NEXT_PUBLIC_TINA_CLIENT_ID=${{ secrets.NEXT_PUBLIC_TINA_CLIENT_ID }}
                      NEXT_PUBLIC_ALGOLIA_APP_ID=${{ secrets.NEXT_PUBLIC_ALGOLIA_APP_ID }}
                      NEXT_PUBLIC_ALGOLIA_ADMIN_KEY=${{ secrets.NEXT_PUBLIC_ALGOLIA_ADMIN_KEY }}
                      NEXT_PUBLIC_ALGOLIA_INDEX_NAME=${{ secrets.NEXT_PUBLIC_ALGOLIA_INDEX_NAME }}
                      NEXT_PUBLIC_ALGOLIA_API_KEY=${{ secrets.NEXT_PUBLIC_ALGOLIA_API_KEY }}
                      NEXT_PUBLIC_TINA_BRANCH=${{ inputs.tina_branch || secrets.NEXT_PUBLIC_TINA_BRANCH }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

            - name: Image info
              run: |
                  echo "âœ… Build completed successfully!"
                  echo "Image tag   : ${{ steps.meta.outputs.tags }}"
                  echo "Image digest: ${{ steps.build.outputs.digest }}"
                  echo "Source branch: ${{ inputs.source_branch || 'Not specified' }}"
                  echo "Content branch: ${{ inputs.tina_branch || secrets.NEXT_PUBLIC_TINA_BRANCH }}"